"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ addressMapping.js –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã addresses –∏ —Å–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É
–¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.
"""

import psycopg2
import os
import json
from datetime import datetime

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
POSTGRES_DSN = os.environ.get('POSTGRES_DSN', 'postgresql://postgres:postgres@localhost:5432/crm_lite')

# –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
OUTPUT_FILE = os.path.abspath(os.path.join(
    os.path.dirname(__file__), 
    '..', '..', 
    'frontend', 'src', 'data', 
    'addressMapping.js'
))

def parse_postgres_dsn(dsn):
    """–ü–∞—Ä—Å–∏–Ω–≥ DSN –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    # –§–æ—Ä–º–∞—Ç: postgresql://user:password@host:port/database
    # –∏–ª–∏ postgresql+psycopg2://user:password@host:port/database
    dsn = dsn.replace('postgresql+psycopg2://', '').replace('postgresql://', '')
    
    if '@' in dsn:
        auth, location = dsn.split('@')
        user, password = auth.split(':') if ':' in auth else (auth, '')
        host_port, database = location.split('/')
        host, port = host_port.split(':') if ':' in host_port else (host_port, '5432')
    else:
        user = 'postgres'
        password = 'postgres'
        host = 'localhost'
        port = '5432'
        database = 'crm_lite'
    
    return {
        'user': user,
        'password': password,
        'host': host,
        'port': port,
        'database': database
    }

def fetch_addresses_from_db():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL...")
    
    try:
        # –ü–∞—Ä—Å–∏–º DSN
        db_params = parse_postgres_dsn(POSTGRES_DSN)
        
        print(f"   üìå –•–æ—Å—Ç: {db_params['host']}:{db_params['port']}")
        print(f"   üìå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_params['database']}")
        print(f"   üìå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {db_params['user']}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = psycopg2.connect(
            host=db_params['host'],
            port=db_params['port'],
            database=db_params['database'],
            user=db_params['user'],
            password=db_params['password']
        )
        
        cursor = conn.cursor()
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n")
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        print("üìä –ò–∑–≤–ª–µ–∫–∞—é –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'addresses'...")
        cursor.execute("""
            SELECT DISTINCT address 
            FROM addresses 
            WHERE address IS NOT NULL 
              AND address != ''
            ORDER BY address
        """)
        
        addresses = [row[0] for row in cursor.fetchall()]
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(addresses)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤\n")
        
        cursor.close()
        conn.close()
        
        return addresses
        
    except psycopg2.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return []

def generate_mapping_file(addresses):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ addressMapping.js"""
    if not addresses:
        print("‚ö†Ô∏è  –ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –§–∞–π–ª –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω.")
        return False
    
    print("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∞–π–ª addressMapping.js...\n")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    content = []
    content.append("// –ú–∞–ø–ø–∏–Ω–≥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏")
    content.append("// –§–æ—Ä–º–∞—Ç: \"—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π–ê–¥—Ä–µ—Å\": { address: \"–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å\", coordinates: [—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞] }")
    content.append(f"// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    content.append(f"// –í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤: {len(addresses)}")
    content.append("")
    content.append("export const addressMapping = {")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
    content.append('  // –ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (–º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö)')
    content.append('  "1234_–ú–æ—Å–∫–≤–∞_—É–ª_–õ–µ–Ω–∏–Ω–∞_1": {')
    content.append('    address: "–ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1",')
    content.append('    coordinates: [55.751244, 37.618423] // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö')
    content.append('  },')
    content.append('')
    content.append('  // ========== –ê–¥—Ä–µ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç—Ä–µ–±—É—é—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è) ==========')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ –ë–î
    for i, addr in enumerate(addresses):
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        escaped_addr = addr.replace('\\', '\\\\').replace('"', '\\"')
        
        content.append(f'  "{escaped_addr}": {{')
        content.append(f'    address: "", // TODO: –£–∫–∞–∂–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –∞–¥—Ä–µ—Å')
        content.append(f'    coordinates: [] // TODO: –£–∫–∞–∂–∏—Ç–µ [—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞]')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—è—Ç—É—é, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
        if i < len(addresses) - 1:
            content.append('  },')
        else:
            content.append('  }')
        
        if (i + 1) % 10 == 0:
            content.append('')  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–∞–∂–¥—ã–µ 10 –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    
    content.append("};")
    content.append("")
    content.append("// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–∞ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∞–¥—Ä–µ—Å—É")
    content.append("export const getAddressData = (technicalAddress) => {")
    content.append("  if (!technicalAddress) return null;")
    content.append("  ")
    content.append("  // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ")
    content.append("  if (addressMapping[technicalAddress]) {")
    content.append("    return addressMapping[technicalAddress];")
    content.append("  }")
    content.append("  ")
    content.append("  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–µ—Ä–Ω–µ–º null")
    content.append("  return null;")
    content.append("};")
    content.append("")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    try:
        with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
            f.write('\n'.join(content))
        
        print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {OUTPUT_FILE}")
        print(f"\nüìç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤: {len(addresses)}")
        print(f"   ‚Ä¢ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {len(content)}")
        print(f"\nüí° –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:")
        print(f"   1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª: {OUTPUT_FILE}")
        print(f"   2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ:")
        print(f"      - address: —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –∞–¥—Ä–µ—Å")
        print(f"      - coordinates: [—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞]")
        print(f"   3. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö:")
        print(f"      –ü–ö–ú –Ω–∞ –∫–∞—Ä—Ç–µ ‚Üí '–ß—Ç–æ –∑–¥–µ—Å—å?' ‚Üí —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
        print(f"\n‚ú® –ì–æ—Ç–æ–≤–æ!\n")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 70)
    print("üó∫Ô∏è  –ì–ï–ù–ï–†–ê–¢–û–† –ú–ê–ü–ü–ò–ù–ì–ê –ê–î–†–ï–°–û–í")
    print("=" * 70)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ –ë–î
    addresses = fetch_addresses_from_db()
    
    if not addresses:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   ‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
        print("   ‚Ä¢ –ù–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã 'addresses'")
        print("   ‚Ä¢ –ù–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–æ–ª–±—Ü–µ 'address'")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∞–¥—Ä–µ—Å–æ–≤
    print("üìã –ü—Ä–∏–º–µ—Ä—ã –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    for i, addr in enumerate(addresses[:5], 1):
        print(f"   {i}. {addr}")
    
    if len(addresses) > 5:
        print(f"   ... –∏ –µ—â—ë {len(addresses) - 5} –∞–¥—Ä–µ—Å–æ–≤\n")
    else:
        print()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª
    success = generate_mapping_file(addresses)
    
    if success:
        print("=" * 70)
        print("üéâ –ü–†–û–¶–ï–°–° –ó–ê–í–ï–†–®–Å–ù –£–°–ü–ï–®–ù–û!")
        print("=" * 70)
    else:
        print("=" * 70)
        print("‚ö†Ô∏è  –ü–†–û–¶–ï–°–° –ó–ê–í–ï–†–®–Å–ù –° –û–®–ò–ë–ö–ê–ú–ò")
        print("=" * 70)

if __name__ == '__main__':
    main()
